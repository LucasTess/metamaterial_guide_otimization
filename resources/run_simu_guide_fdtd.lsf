# run_simu_guide_fdtd.lsf
clc;

##########################################################################################################
# Define os parametros de simulacao

# === LEIA OS PARAMETROS DAS USER PROPERTIES AQUI ===
# Acessa as propriedades do grupo "Guia Metamaterial" diretamente pelo nome completo.
# Esta eh a forma mais robusta de acessar as user properties de um objeto nomeado.

height = getnamed("Guia Metamaterial", "height");
w = getnamed("Guia Metamaterial", "w");
#l = getnamed("Guia Metamaterial", "l");
#s = getnamed("Guia Metamaterial", "s");
Lambda = getnamed("Guia Metamaterial", "Lambda");
DC = getnamed("Guia Metamaterial", "DC");

# Adicionado para depuração:
? "Valores dos parametros lidos em run_simu_guide_fdtd.lsf:";
? "s: " + num2str(s);
? "w: " + num2str(w);
? "l: " + num2str(l);
? "Height: " + num2str(height);
# Recalculando posição final para os monitores e portas
delta = l+s;

sim_time = 1000e-15;
points = 500;
mesh_accuracy = 4;
addfdtd;
set("dimension",2);
set("simulation time", sim_time);
set("x",0);
set("x span", Lambda*8);
set("y",0);
set("y span",w*3);
set("z", 0);
set("z span", height*3);
set("background material", 'Agua_deion');

set("mesh accuracy", mesh_accuracy);

setglobalsource("wavelength start", 1.45e-6);
setglobalsource("wavelength stop", 1.62e-6);
setglobalsource("optimize for short pulse", 0);

amplitude = 3;
addport;
set("name","in");
setnamed("FDTD::ports::in", "amplitude", amplitude);
setnamed("FDTD::ports::in", "x", -(Lambda*DC);
setnamed("FDTD::ports::in", "y",0);
setnamed("FDTD::ports::in", "y span", w);
setnamed("FDTD::ports::in", "z",-0.11e-6 + height/2);
setnamed("FDTD::ports::in", "z span", height);
setnamed("FDTD::ports::in", "direction", "Forward");

addport;
set("name","through");
setnamed("FDTD::ports::through", "amplitude", amplitude);
setnamed("FDTD::ports::through", "x", s);
setnamed("FDTD::ports::through", "y", 0);
setnamed("FDTD::ports::through", "y span", w);
setnamed("FDTD::ports::through", "z",-0.11e-6 + height/2);
setnamed("FDTD::ports::through", "z span", height);
setnamed("FDTD::ports::through", "direction", "Backward");

setnamed("FDTD::ports", "monitor frequency points", points);
setglobalmonitor("frequency points", points);


addsweep(3);
setsweep("s-parameter sweep");


